{"mappings":"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","sources":["src/index.js","src/javascript/weekly-trends/weekly-trends-main.js","src/javascript/weekly-trends/weekly-trends-markup.js","src/javascript/weekly-trends/card-handler.js","<<jsx-config-pragma.js>>","src/javascript/upcoming/upcoming.js","src/javascript/upcoming/api-service.js","src/javascript/upcoming/create-upcoming-markup.js","src/javascript/upcoming/img-handler.js"],"sourcesContent":["import { getGenres } from './javascript/weekly-trends/weekly-trends-genres';\ngetGenres();\n\nimport './javascript/loader';\nimport './javascript/stars-rating';\nimport './javascript/header/header';\nimport './javascript/hero/hero';\nimport './javascript/weekly-trends/weekly-trends-main';\nimport './javascript/upcoming/upcoming';\nimport './javascript/modal/modal-trailer';\nimport './javascript/global-listener';\nimport './javascript/scroll-up';\n","import { createMarkup, insertMarkup } from './weekly-trends-markup.js';\nimport debounce from 'lodash.debounce';\nimport { onError } from './on-error.js';\nimport { CardHandler } from './card-handler.js';\nimport { getTrendyFilms } from '../api-service/api-service.js';\nimport { openModalAboutFilm } from '../modal/movieModal.js';\n\nwindow.addEventListener('DOMContentLoaded', showWeeklyTrends);\nwindow.addEventListener('resize', debounce(showWeeklyTrends, 200));\n\nconst inputPlace = document.querySelector('.cards-list');\nconst filmList = document.querySelector('.listListener');\nconst cardHandler = new CardHandler();\n\nexport async function showWeeklyTrends() {\n  cardHandler.setCurrentAmount();\n\n  if (cardHandler.prevAmount === cardHandler.currentAmount) return;\n\n  const numMovies = cardHandler.currentAmount;\n  try {\n    const { data } = await getTrendyFilms();\n    const films = data.results.slice(0, numMovies);\n    const markup = createMarkup(films);\n    //insert markup\n    insertMarkup(inputPlace, markup);\n    //add listeners\n    filmList.addEventListener('click', event => {\n      const li = event.target.closest('.card-item');\n      const movieId = li.getAttribute('data-id');\n      openModalAboutFilm(movieId);\n    });\n  } catch (error) {\n    onError(error);\n  }\n}\n","import { validateGenres } from './weekly-trends-genres';\nimport starsRating from '../stars-rating';\nimport { GENRES_KEY } from '../api-service/api_keys';\n\nexport function createMarkup(films) {\n  const storage = JSON.parse(localStorage.getItem(GENRES_KEY));\n\n  return films\n    .map(\n      ({ id, poster_path, release_date, title, genre_ids, vote_average }) => {\n        const genres = validateGenres(genre_ids, storage);\n        const posterPath = `https://image.tmdb.org/t/p/original/${poster_path}`;\n\n        let releaseDate = '';\n        if (release_date === 'undefind') {\n          releaseDate = 'Date unknown';\n        } else {\n          releaseDate = release_date.split('-')[0];\n        }\n\n        return `<li class=\"card-item item\" data-id=\"${id}\">\n            <img class=\"film-poster\" src=\"https://image.tmdb.org/t/p/original/${posterPath}\" alt=\"${title} poster\" />\n            <div class=\"overlay\">\n              <div class=\"film-info\">\n                <p class=\"film-title\">${title}</p>\n                <div class=\"film-details\">\n                  <span class=\"film-description\">${genres} | ${releaseDate}</span>\n                  <div class=\"stars-container\">${starsRating({\n                    voteAverage: vote_average,\n                    isHero: false,\n                  })}</div>\n                </div>\n              </div>\n            </div>\n          </li>`;\n      }\n    )\n    .join('');\n}\n\nexport function insertMarkup(inputPlace, markup) {\n  if (inputPlace) {\n    inputPlace.innerHTML = markup;\n  }\n}\n","export class CardHandler {\n  constructor() {\n    this.prevAmount = null;\n    this.currentAmount = null;\n  }\n\n  setCurrentAmount() {\n    const screenWidth = window.innerWidth;\n    this.setPrevAmount();\n    this.currentAmount = screenWidth < 768 ? 1 : 3;\n  }\n\n  setPrevAmount() {\n    this.prevAmount = this.currentAmount;\n  }\n}\n",null,"import debounce from 'lodash.debounce';\nimport { getUpcomingMovies } from './api-service';\nimport { careateUpcomingMarkup } from './create-upcoming-markup';\nimport { handleUpcomingImg } from './img-handler';\nimport { getRandomItem } from './helpers';\n// import defaultImg from '../images/logo.png';\n\nconst upcomingEl = document.querySelector('.upcoming-card');\n\nwindow.addEventListener('DOMContentLoaded', handleUpcoming);\n\nasync function handleUpcoming() {\n  try {\n    const upcomingMovies = await getUpcomingMovies();\n    const randomMovie = getRandomItem(upcomingMovies);\n    // console.log(randomMovie);\n    \n    const markup = careateUpcomingMarkup(randomMovie);\n    \n    updateUpcoming(markup);\n    // handleUpcomingImg(randomMovie);\n\n    const debouncedImgHandler = debounce(\n      () => handleUpcomingImg(randomMovie),\n      200\n    );\n\n    window.addEventListener('resize', debouncedImgHandler);\n    //\n  } catch (error) {\n    console.error('error:', error);\n    // updateUpcoming(failMarkup)\n    ('ERR_BAD_REQUEST');\n  }\n}\n\nfunction updateUpcoming(markup = '') {\n  upcomingEl.innerHTML = markup;\n}\n\n\n","import axios from 'axios';\n// import { API_KEY } from '../fetch/api_keys';\nimport { API_BAERER } from '../api-service/api_keys';\n\nconst upcomingMoviesApi = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/movie/upcoming',\n  // params: { language: 'en-US', page: '1', region: 'UA' },\n  headers: { Authorization: `Bearer ${API_BAERER}` },\n});\n\nexport async function getUpcomingMovies() {\n  const response = await upcomingMoviesApi.get();\n  // console.log(response);\n  return response.data.results;\n}\n","import { roundToTen, findFilmAtStorage } from './helpers';\nimport { STORAGE_KEY } from '../api-service/api_keys';\nimport { validateGenres } from '../weekly-trends/weekly-trends-genres';\nexport function careateUpcomingMarkup(film) {\n  const {\n    backdrop_path,\n    poster_path,\n    title,\n    release_date,\n    popularity,\n    vote_count,\n    vote_average,\n    genre_ids,\n    overview,\n    id,\n  } = film;\n\n  const isSaved = findFilmAtStorage(STORAGE_KEY, id);\n  // console.log('myIsSaved', isSaved);\n\n  const btnAttribute = isSaved ? 'remove' : 'add';\n  const btnText = isSaved ? 'Remove from my library' : 'Add to my library';\n  //\n  const imgPath = window.screen.width < 768 ? poster_path : backdrop_path;\n  const transformedDate = release_date.replaceAll('-', '.');\n  const roundedPopularity = roundToTen(popularity);\n\n  // const trimedGenres = trimGenreList(['comedy', 'action', 'thriller']);\n\n  // function trimGenreList(genres) {\n  //   if (genres.length > 2) return `${genres.slice(0, 2).join(', ')}, ...`;\n  //   else return `${genres.join(', ')}`;\n  // }\n\n  const genres = validateGenres(\n    genre_ids,\n    JSON.parse(localStorage.getItem('genres'))\n  );\n  //console.log(genresPromise)\n  //const genres = await genresPromise;\n  //const genres = Promise.resolve(genresPromise).then(result => result);\n  //console.log(genres);\n\n  return `\n        <div class='upcoming-card__figure'>\n          <div class='upcoming-card__layout'></div>\n            <img\n              src=\"https://image.tmdb.org/t/p/original${imgPath}\"\n              alt=\"${title}\"\n              loading='lazy'\n              class='upcoming-card__img'\n            > \n          </div>\n        </div>\n        <div class='upcoming-card__body'>\n          <h3 class=\"upcoming-card__title\">${title}</h3>\n          <div class='metrics-list__main-container'>\n            <ul class=\"list metrics-list\">\n              <li class=\"metrics-list__item\">\n                <p class=\"metrics-text\">Release date</p>\n                <p class=\"metrics-text metrics-text--date\">${transformedDate}</p>\n              </li>\n              <li class=\"metrics-list__item\">\n                <p class=\"metrics-text\">Vote / Votes</p>\n                <p class=\"metrics-text metrics-text--vote\">\n                  <span class=\"vote-wrapper\">${vote_average}</span>\n                  /\n                  <span class=\"vote-wrapper\">${vote_count}</span>\n                </p>\n              </li>\n              <li class=\"metrics-list__item\">\n                <p class=\"metrics-text\">Popularity</p>\n                <p class=\"metrics-text\">${roundedPopularity}</p>\n              </li>\n              <li class=\"metrics-list__item\">\n                <p class=\"metrics-text\">Genre</p>\n                <p class=\"metrics-text\">${genres}</p>\n              </li>\n            </ul>\n          </div>\n          <h4 class=\"upcoming-card__subtitle metrics-text\">ABOUT</h4>\n            <p class=\"upcoming-card__text\">${overview}</p>\n          <button class=\"btn\" type=\"button\" data-id=${id} data-${btnAttribute}>${btnText}</button>\n        </div>`;\n}\n","export function handleUpcomingImg({ poster_path, backdrop_path, title }) {\n  // const imgContainerEl = document.querySelector('.upcoming-card__figure');\n  // if (!imgContainerEl) return console.log('no upcoming section');\n\n  // const imgIsPresent = imgContainerEl.firstElementChild?.nodeName === 'IMG';\n  // console.log(imgIsPresent);\n\n  const mediaWidth = window.matchMedia('(max-width: 767px)');\n  // mediaWidth.onchange(() => console.log('change media'));\n  // console.log(mediaWidth);\n\n  const img = document.querySelector('.upcoming-card__img');\n  if (!img) return console.log('no upcoming section');\n\n  const posterLink = `https://image.tmdb.org/t/p/original${poster_path}`;\n  const backdropLink = `https://image.tmdb.org/t/p/original${backdrop_path}`;\n\n  if (window.screen.width < 768 && img.src !== posterLink) {\n    return (img.src = posterLink);\n  }\n\n  if (window.screen.width >= 768 && img.src !== backdropLink) {\n    return (img.src = backdropLink);\n  }\n\n  // if (imgIsPresent && !mediaWidth.matches) {\n  //   clearElement(imgContainerEl);\n  // }\n\n  // if (imgIsPresent) return;\n\n  // if (mediaWidth.matches) {\n  //   const img = document.createElement('img');\n\n  //   const link = poster_path\n  //     ? `https://image.tmdb.org/t/p/original${poster_path}`\n  //     : defaultImg;\n\n  //   img.src = link;\n  //   img.alt = title;\n  //   img.loading = 'lazy';\n  //   img.classList.add('upcoming-card__poster');\n\n  //   console.log(img);\n  //   imgContainerEl.append(img);\n  // }\n}\n\nfunction checkMedia(url) {\n  x = window.matchMedia('(max-width: 767px)');\n  if (x.matches) return console.log(url);\n  console.log('more');\n}\n"],"names":["$1uap0","parcelRequire","$bpxeT","$307d567858cd93b8$export$24783e9f3a24abe4","films","storage","JSON","parse","localStorage","getItem","$55T2m","GENRES_KEY","map","param","id","poster_path","release_date","title","genre_ids","vote_average","genres","validateGenres","posterPath","concat","releaseDate","split","$7svdd","default","voteAverage","isHero","join","$307d567858cd93b8$export$9393612adafb5496","inputPlace","markup","innerHTML","$8MBJY","$b74c88635cc8344f$export$ca4abc9e90348957","CardHandler","this","prevAmount","currentAmount","key","screenWidth","window","innerWidth","setPrevAmount","addEventListener","$f4a5f668cc154b89$export$1c9ed5068c665f97","$parcel$interopDefault","$l1Gdk","$f4a5f668cc154b89$var$inputPlace","document","querySelector","$f4a5f668cc154b89$var$filmList","$f4a5f668cc154b89$var$cardHandler","$f4a5f668cc154b89$var$_showWeeklyTrends","apply","arguments","$2TvXO","mark","_callee","numMovies","data","setCurrentAmount","$7ukts","getTrendyFilms","_ctx","sent","results","slice","event","movieId","target","closest","getAttribute","$lHglD","openModalAboutFilm","$cQQ4S","onError","t0","$ea7fb3835d9913f4$var$upcomingMoviesApi","$dIxxU","create","baseURL","headers","Authorization","API_BAERER","$ea7fb3835d9913f4$export$577747a77907970f","$ea7fb3835d9913f4$var$_getUpcomingMovies","response","get","$8s63n","$76b6b7326a34a64a$export$f4becdac8252a1ad","film","backdrop_path","popularity","vote_count","overview","isSaved","findFilmAtStorage","STORAGE_KEY","btnAttribute","btnText","imgPath","screen","width","transformedDate","replaceAll","roundedPopularity","roundToTen","$6f7e785ac2f84a5e$export$f5a341b7ca0be7a","img","matchMedia","console","log","posterLink","backdropLink","src","$7aa291de1461f4f3$var$upcomingEl","$7aa291de1461f4f3$var$_handleUpcoming","upcomingMovies","randomMovie","debouncedImgHandler","getRandomItem","$7aa291de1461f4f3$var$updateUpcoming","error","length","getGenres"],"version":3,"file":"index.a8923782.js.map"}